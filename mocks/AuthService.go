// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	model "github.com/crowmw/risiti/model"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: r
func (_m *AuthService) Authorize(r *http.Request) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignIn provides a mock function with given fields: w, user
func (_m *AuthService) SignIn(w *http.ResponseWriter, user *model.User) error {
	ret := _m.Called(w, user)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.ResponseWriter, *model.User) error); ok {
		r0 = rf(w, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignOut provides a mock function with given fields: w
func (_m *AuthService) SignOut(w *http.ResponseWriter) {
	_m.Called(w)
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
